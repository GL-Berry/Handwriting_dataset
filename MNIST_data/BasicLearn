import tensorflow as tf
from tensorflow.keras import layers
import numpy as np
import matplotlib.pyplot as plt
import os
import pandas as pd


def Vector2Image(Vectors, Maxrows=6, Maxcolumns=6):
    # Vectors is a matrix, with num_sample*num_feature
    if Vectors.shape[0] > Maxrows * Maxcolumns:
        assert "Index error"
    else:
        rows = min(Vectors.shape[0] // Maxcolumns + 1, Maxrows)
        for index in range(Vectors.shape[0]):
            plt.subplot(rows, Maxcolumns, index + 1)
            plt.imshow(Vectors.iloc[index, 1:].values.reshape(28, 28), cmap="gray")
            plt.title(Vectors.iloc[index, 0])
        plt.show()
    return


def readfile(kind):
    Train_path = os.path.join(os.getcwd(), 'fashion-mnist_%s.csv' % kind[0])
    Train_data = pd.read_csv(Train_path)
    Test_path = os.path.join(os.getcwd(), 'fashion-mnist_%s.csv' % kind[1])
    Test_data = pd.read_csv(Test_path)
    return Train_data, Test_data


def constract_model():
    model = tf.keras.Sequential(
        [layers.Dense(128, activation="relu"),
         layers.Dense(10, activation="relu")]
    )
    model.compile(optimizer="adam",
                  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                  metrics=["accuracy"])
    return model


def plot_image(i, predictions_array, true_label, img):
    predictions_array, true_label, img = predictions_array, true_label[i], img[i].reshape(28, 28)
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(img, cmap=plt.cm.binary)
    predicted_label = np.argmax(predictions_array)
    if predicted_label == true_label:
        color = "blue"
    else:
        color = "red"
    plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                         100 * np.max(predictions_array),
                                         class_names[true_label]),
               color=color)
    return


def plot_value_array(i, predictions_array, true_label):
    predictions_array, true_label = predictions_array, true_label[i]
    plt.grid(False)
    plt.xticks(range(10))
    plt.yticks([])
    thisplot = plt.bar(range(10), predictions_array, color="#777777")
    plt.ylim([0, 1])
    predicted_label = np.argmax(predictions_array)
    thisplot[predicted_label].set_color("red")
    thisplot[true_label].set_color("blue")
    return


def main():
    global class_names
    class_names = ["T-shirt/top", "Trouser", "Pullover", "Dress", "Coat", "Sandal", "Shirt", "Sneaker", "Bag",
                   "Ankle boot"]
    Train_data, Test_data = readfile(["Train", "Test"])
    Train_images, Train_labels = Train_data.iloc[:, 1:], Train_data.iloc[:, 0]
    model = constract_model()
    model.fit(Train_images.values / 255.0, Train_labels.values, epochs=10)
    Test_images, Test_labels = Test_data.iloc[:, 1:], Test_data.iloc[:, 0]
    Test_loss, Test_acc = model.evaluate(Test_images.values / 255.0, Test_labels)
    print("\nTest Loss: %f.\nTest acc: %f." % (Test_loss, Test_acc))
    probability_model = tf.keras.Sequential([model, layers.Softmax()])
    predictions = probability_model.predict(Test_images.values / 255.0)
    num_rows = 5
    num_cols = 3
    num_images = num_rows * num_cols
    plt.figure(figsize=(2 * 2 * num_cols, 2 * num_rows))
    for i in range(num_images):
        plt.subplot(num_rows, 2 * num_cols, 2 * i + 1)
        plot_image(i, predictions_array=predictions[i], true_label=Test_labels, img=Test_images.values)
        plt.subplot(num_rows, 2 * num_cols, 2 * i + 2)
        plot_value_array(i, predictions_array=predictions[i], true_label=Test_labels)
    plt.tight_layout()
    plt.show()
    img = Test_images.values[0]
    print(img.shape)
    img = np.expand_dims(img, 0)
    print(img.shape)
    predictions_single = probability_model.predict(img)
    print(predictions_single)

if __name__ == "__main__":
    main()
